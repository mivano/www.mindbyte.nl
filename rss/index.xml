<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Michiel van Oudheusden]]></title><description><![CDATA[Microsoft .NET consultant, developer, architect. Focus on ALM, DevOps, APIs, Azure and everything around it.]]></description><link>http://mindbyte.nl</link><image><url>https://mindbyte.nl/images/servers.png</url><title>Michiel van Oudheusden</title><link>http://mindbyte.nl</link></image><generator>RSS for Node</generator><lastBuildDate>Thu, 21 Dec 2017 23:20:10 GMT</lastBuildDate><atom:link href="http://mindbyte.nl/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Application Insights release annotations from Linux]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Application Insights provides an enormous amount of information about your application, infrastructure, users etc. It can be difficult to see if a recent change or deployment caused a certain effect. Like; did the last release increased or decreased the performance or did the error rate went up or down.</p>
</div>
<div class="paragraph">
<p>A number of application performance monitoring systems have a functionality which allows you to mark releases. This basically stores an event which allows you to easily identify the changes before and after.
In New Relic they are called <a href="https://docs.newrelic.com/docs/apm/new-relic-apm/maintenance/recording-deployments">deployments</a>, in Raygun, it is <a href="https://raygun.com/docs/deployments">Deployment Tracking</a> and in Application Insight it is called <a href="https://docs.microsoft.com/en-us/azure/application-insights/app-insights-annotations">Release annotations</a>.</p>
</div>
<div class="paragraph">
<p>The capabilities in Application Insights are, compared to for example New Relic, pretty basic. In New Relic you can more clearly see the effect between different transactions caused by a deployment.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_application_insights">Application Insights</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In Application Insights you get, for now, markers in the graphs. This is visible in for example the servers chart:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="http://mindbyte.nl/images/appinsightmarkers.png" alt="appinsightmarkers.png">
</div>
</div>
<div class="paragraph">
<p>When you click on a marker, you get additional properties like the name of the person who deployed, or the branch it originated from. You can specify these properties yourself.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="http://mindbyte.nl/images/appinsightmarkerproperties.png" alt="appinsightmarkerproperties.png">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_set_a_release_annotation_marker">Set a Release Annotation marker</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Microsoft released two different options for setting the release marker event; a <a href="https://marketplace.visualstudio.com/items?itemName=ms-appinsights.appinsightsreleaseannotations">Visual Studio Online build Task</a> or a <a href="https://github.com/Microsoft/ApplicationInsights-Home/blob/master/API/CreateReleaseAnnotation.ps1">Powershell script</a>.</p>
</div>
<div class="paragraph">
<p>However, when you use a Linux build agent you are out of luck. An option would be to add a Windows agent to the mix as nowadays you can have different phases in your build, but it is also possible to use a bash script to accomplish the same.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">#!/bin/bash

uuid()
{
    local N B T

    for (( N=0; N &lt; 16; ++N ))
    do
        B=$(( $RANDOM%255 ))

        if (( N == 6 ))
        then
            printf '4%x' $(( B%15 ))
        elif (( N == 8 ))
        then
            local C='89ab'
            printf '%c%x' ${C:$(( $RANDOM%${#C} )):1} $(( B%15 ))
        else
            printf '%02x' $B
        fi

        for T in 3 5 7 9
        do
            if (( T == N ))
            then
                printf '-'
                break
            fi
        done
    done

    echo
}

apikey="&lt;replace with your apikey&gt;"
applicationId="&lt;replace with your applicationId&gt;"
releaseName="Release X"
releaseDescription="Release deployed by VSOnline"
triggerBy="User"
eventTime=`date '+%Y-%m-%dT%H:%M:%S' -u`
category="Deployment"
id=$(uuid)
grpEnv=$(curl -Ls -o /dev/null -w %{url_effective} "http://go.microsoft.com/fwlink/?prd=11901&amp;pver=1.0&amp;sbp=Application%20Insights&amp;plcid=0x409&amp;clcid=0x409&amp;ar=Annotations&amp;sar=Create%20Annotation")
location="$grpEnv/applications/$applicationId/Annotations?api-version=2015-11"

data='{ "Id": "'$id'", "AnnotationName": "'$releaseName'", "EventTime":"'$eventTime'", "Category":"'$category'", "Properties":"{ \"ReleaseName\":\"'$releaseName'\", \"ReleaseDescription\" : \"'$releaseDescription'\", \"TriggerBy\": \"'$triggerBy'\" }"}'
echo $data
curl -X PUT -H "X-AIAPIKEY: $apikey" -H "Content-Type: application/json; charset=UTF-8" --data "$data" $location</code></pre>
</div>
</div>
<div class="paragraph">
<p>This is a pretty basic script, missing validations, error handling etc, but it is to show you how to call the API, which is currently not documented, from a shell script so you can do this from a Linux machine.</p>
</div>
<div class="paragraph">
<p>The top function creates a Guid. Somehow the API expects a PUT operation and a Guid as identifier needs to be passed in.
Set you apiKey (create this one under the API Access blade) and the applicationId (found under the same API access blade). The releaseName, releaseDescription and triggerBy are up to you to fill in. You can even add additional properties by adding them to the data payload.</p>
</div>
<div class="paragraph">
<p>The first curl command retrieves the location of the API. As it is not yet a public API, we need to follow redirects to come to the right location. The second curl command performs the PUT action. In the header, we pass the apikey.</p>
</div>
<div class="paragraph">
<p>Save this into a file called for example CreateRelease.sh. Make sure to make it executable (<strong>chmod +x ./CreateRelease.sh</strong>) and execute it.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>I needed to do some reverse engineering of the Powershell version, but this is a very minimal way of sending a release event to Application Insights. In a next blog post, I will show how to integrate this into a release step in Visual Studio Online.</p>
</div>
</div>
</div>]]></description><link>http://mindbyte.nl/2017/12/21/Application-Insights-release-annotations-from-Linux.html</link><guid isPermaLink="true">http://mindbyte.nl/2017/12/21/Application-Insights-release-annotations-from-Linux.html</guid><category><![CDATA[vsts]]></category><category><![CDATA[appinsights]]></category><category><![CDATA[monitoring]]></category><dc:creator><![CDATA[Michiel van Oudheusden]]></dc:creator><pubDate>Thu, 21 Dec 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Integrate and change a VSTS pull request]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>You might have seen it with GitHub; when you do a pull request there will most likely be a build being kicked off and that influences the state of the pull request. A failed build (or any other check) is shown on the <a href="https://developer.github.com/v3/guides/building-a-ci-server/">Pull Request page</a>.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="http://mindbyte.nl/images/githubprstatus.png" alt="githubprstatus.png">
</div>
</div>
<div class="paragraph">
<p>Visual Studio Team System can do the same; you can define a build that needs to be successful before the Pull Request can be completed. You also can indicate who needs to approve the PR and even that all the remarks need to be resolved. However, you can also do some more interesting tricks by adding additional services that interface with the Pull Request. Such a service allows you to intercept the changes, determine if the PR can continue and block the PR when not allowed to be merged back into the target branch.</p>
</div>
<div class="paragraph">
<p>For example to check if the code applies to certain rules and conventions, if it has passed a certain qualification from an external system or contains a standard license header.</p>
</div>
<div class="paragraph">
<p>There is a good tutorial from <a href="https://docs.microsoft.com/en-us/vsts/git/how-to/create-pr-status-server">Microsoft</a> on how to build a nodejs application to do this so I won&#8217;t repeat that here. Interesting is that you can use <a href="https://ngrok.com/download">ngrok</a> to map a public domain name to a local port so you can test this from your own machine.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_comments">Comments</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Besides changing the state of the PR (and make it blocked), you can also output comments to the PR. You can do this on individual files and even blocks of code in the file.</p>
</div>
<div class="paragraph">
<p>Creating a comment is exposed by the vsts node library:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" data-lang="javascript">var comments = {
        "comments": [
        {
            "content": "I like your *code* style!",
            "commentType" : 1,
            "parentCommentId" : 0
        }],
        "properties": {
            "Microsoft.TeamFoundation.Discussion.SupportsMarkdown": {
                "type": "System.Int32",
                "value": 1
            }
        },
        "status": 1
    }

    vstsGit.createComment(comments, repoId, pullRequestId, 0, projectId).then( result =&gt; {
        console.log(result);
    }).catch(result =&gt; {
        console.log(result);
    })</code></pre>
</div>
</div>
<div class="paragraph">
<p>Best is to check with the documentation <a href="https://docs.microsoft.com/en-us/rest/api/vsts/git/pull%20request%20threads/create">here</a> as the node library is not up to date.</p>
</div>
<div class="paragraph">
<p>When you create a PR and have your application configured under service hooks, you will get the following in your PR screen:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="http://mindbyte.nl/images/vstsprstatus.png" alt="vstsprstatus.png">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_policy">Policy</h2>
<div class="sectionbody">
<div class="paragraph">
<p>When the service hook is defined as a PR integration, it will show up in the branch policies page as an exteral service.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="http://mindbyte.nl/images/vstsbranchpolicy.png" alt="vstsbranchpolicy.png">
</div>
</div>
<div class="paragraph">
<p>Here you can also make this a mandatory rule. So it has to be approved before it can be merged. If you try to complete a PR and the condition did not apply, you will get a nice warning.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="http://mindbyte.nl/images/vstsprrejected.png" alt="vstsprrejected.png">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_code">Code</h2>
<div class="sectionbody">
<div class="paragraph">
<p>I placed the code on <a href="https://github.com/mivano/pr-status">GitHub</a>; this contains some simple logic to mark a PR to <strong>pending</strong> when you include a <em>WIP</em> in the title or mark it as <strong>error</strong> when it sees an <em>error</em> word in the text. These are just examples, you would check if it complies with your rules. It might need to have a correct description or certain artifacts.</p>
</div>
<div class="paragraph">
<p>The code will also add a comment to the PR. You can make threaded conversations, set the state and even annotate files.</p>
</div>
<div class="paragraph">
<p>You need to set your own Personal Access Token and VSTS address. I used a .env file which you can put in the same folder as your app.js.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>COLLECTIONURL=https://address.visualstudio.com
TOKEN=yourtoken</code></pre>
</div>
</div>
</div>
</div>]]></description><link>http://mindbyte.nl/2017/11/04/Integrate-and-change-a-VSTS-pull-request.html</link><guid isPermaLink="true">http://mindbyte.nl/2017/11/04/Integrate-and-change-a-VSTS-pull-request.html</guid><category><![CDATA[vsts]]></category><dc:creator><![CDATA[Michiel van Oudheusden]]></dc:creator><pubDate>Sat, 04 Nov 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Use health endpoints in ASPNET Core with Docker]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>It is important to know if your nicely created application is still working correctly, but you do not want to keep refreshing your browser and seeing if that page is still returning the data you expect. Luckily there are better ways than just creating a specific endpoint to hit.</p>
</div>
<div class="paragraph">
<p>With some help of <a href="https://www.app-metrics.io/">App Metrics</a> you can easily add one or more health checks to your application. App Metrics is for sure not the only application framework that can do this. Microsoft has a nice <a href="https://docs.microsoft.com/en-us/dotnet/standard/microservices-architecture/implement-resilient-applications/monitor-app-health">implementation</a> too. App Metrics however also focuses on the metrics side (optionally) which adds some nice additional options to your application. It also has support for dotnet core and contains extensive documentation.</p>
</div>
<div class="paragraph">
<p>In general, they work the same; you define a set of health checks and by calling a specific endpoint you get the aggregated result back in the form of a status code and JSON representation.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_sample">Sample</h2>
<div class="sectionbody">
<div class="paragraph">
<p>To demonstrate this, you can use the samples provided by App Metrics from <a href="https://github.com/AppMetrics/Samples.V2/tree/master/AspNetCore2.Health.Api.QuickStart">GitHub</a>.</p>
</div>
<div class="paragraph">
<p>In 'program.cs' you will find the following code:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-csharp" data-lang="csharp">  WebHost.CreateDefaultBuilder(args)
            .ConfigureHealthWithDefaults(
                builder =&gt;
                {
                    const int threshold = 100;
                    builder.HealthChecks.AddCheck("DatabaseConnected", () =&gt; new ValueTask&lt;HealthCheckResult&gt;(HealthCheckResult.Healthy("Database Connection OK")));
                    builder.HealthChecks.AddProcessPrivateMemorySizeCheck("Private Memory Size", threshold);
                    builder.HealthChecks.AddProcessVirtualMemorySizeCheck("Virtual Memory Size", threshold);
                    builder.HealthChecks.AddProcessPhysicalMemoryCheck("Working Set", threshold);
                    builder.HealthChecks.AddPingCheck("google ping", "google.com", TimeSpan.FromSeconds(10));
                    builder.HealthChecks.AddHttpGetCheck("github", new Uri("https://github.com/"), TimeSpan.FromSeconds(10));
                })
                .UseHealth()
                .UseStartup&lt;Startup&gt;()
                .Build();</code></pre>
</div>
</div>
<div class="paragraph">
<p>A couple of health checks are created and the UseHealth extension enables the functionality.</p>
</div>
<div class="paragraph">
<p>When you compile and run this code and go to the <a href="http://localhost:5000/health" class="bare">http://localhost:5000/health</a> endpoint, you will get back something like this:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-json" data-lang="json">{
  "healthy": {
    "DatabaseConnected": "Database Connection OK",
    "github": "OK. https://github.com/",
    "google ping": "OK. google.com"
  },
  "degraded": {
    "Sample Health Check": "DEGRADED"
  },
  "unhealthy": {
    "Private Memory Size": "FAILED. 114225152 &gt; 100 bytes",
    "Virtual Memory Size": "FAILED. 2218805383168 &gt; 100 bytes",
    "Working Set": "FAILED. 69939200 &gt; 100"
  },
  "status": "Unhealthy"
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>As you can imagine, you can add any kind of check and by calling this from an API monitoring tool like <a href="https://www.runscope.com">RunScope</a>, your load balancer, <a href="https://www.newrelic.com">New Relic Synthetics</a> you can check the state of your application and act accordingly.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_docker">Docker</h2>
<div class="sectionbody">
<div class="paragraph">
<p>So how is Docker able to use this? Since version 1.12 there is support for <a href="https://docs.docker.com/engine/reference/builder/#healthcheck">HEALTHCHECK</a>. You can specify an instruction for Docker to use to validate the application running inside the container. It also exposes a health status next to the normal status of a container which can be queried using 'docker inspect' and is visible when using 'docker ps'.</p>
</div>
<div class="paragraph">
<p>For the above example you can use a DOCKERFILE containing the HEALTHCHECK instruction:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>FROM microsoft/aspnetcore:2.0
ARG source
WORKDIR /app
HEALTHCHECK --interval=2s --timeout=3s --retries=1 CMD curl --silent --fail http://localhost:80/health || exit 1
EXPOSE 80
COPY ${source:-obj/Docker/publish} .
ENTRYPOINT ["dotnet", "AspNetCore2.Health.Api.QuickStart.dll"]</code></pre>
</div>
</div>
<div class="paragraph">
<p>The interval, timeout, and retries are optional, the CMD will tell what the actual check is. In this case, it is a curl command to the /health endpoint. Since it returns a non 200 code when there is an unhealthy state, the curl command will exit with a 1. Do keep in mind that curl needs to be included in the container image and this might not always be the <a href="https://blog.sixeyed.com/docker-healthchecks-why-not-to-use-curl-or-iwr/">best option</a>.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="http://mindbyte.nl/images/healthdocker.png" alt="healthdocker.png">
</div>
</div>
<div class="paragraph">
<p>Next to showing the health state, it will also raise an event which can be used by an orchestration engine to stop sending traffic to an unhealthy container instance and restart containers.</p>
</div>
<div class="paragraph">
<p>The healthcheck can also be set in a docker-compose.yml file</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-yaml" data-lang="yaml">healthcheck:
  test: curl --silent --fail http://localhost:80/health || exit 1
  interval: 5s
  timeout: 10s
  retries: 3</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_swarm">Swarm</h2>
<div class="sectionbody">
<div class="paragraph">
<p>When using Docker Swarm, you can also use the healthcheck options directly when creating the service by specifying the options health-cmd, health-retries and/or health-interval. When it detects an unhealthy container, it will restart the container automatically.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_kubernetes">Kubernetes</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In Kubernetes it works a little bit different. You still use the /health endpoint, but specify a <a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#define-a-liveness-http-request">livenessProbe</a>. This will make sure that Kubernetes automatically restarts working containers having failed applications inside.</p>
</div>
</div>
</div>]]></description><link>http://mindbyte.nl/2017/11/03/Use-health-endpoints-in-ASPNET-Core-with-Docker.html</link><guid isPermaLink="true">http://mindbyte.nl/2017/11/03/Use-health-endpoints-in-ASPNET-Core-with-Docker.html</guid><category><![CDATA[docker]]></category><dc:creator><![CDATA[Michiel van Oudheusden]]></dc:creator><pubDate>Fri, 03 Nov 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[The importance of planning poker]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>When you practice the scrum process, then one of the artifacts is planning poker. It is a method to gather estimates for the stories and with teams new to scrum it is always a tricky journey how to use this efficiently.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_why">Why</h2>
<div class="sectionbody">
<div class="paragraph">
<p>So first the why question; why not have a list of stories and forgo the estimation? We all know estimating is hard and is mostly incorrect anyway. For me there are two main reasons to do estimations;</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>It allows for a discussion about the story and to come to an agreement on how to tackle the completion of it.</p>
</li>
<li>
<p>Estimated stories and a known velocity gives a rough indication when something can be picked up.</p>
</li>
</ol>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_playing_the_game">Playing the game</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Number one is IMHO the most important one. During the refinement session, the Product Owner describes the story. So basically what he/she wants to have delivered. The team should have a definition of done, therefore there is an agreed framework of when the story can be considered completed. This way both the business and the team are aligned when the story is delivered.</p>
</div>
<div class="paragraph">
<p>Of course, the team can raise questions to the PO to get the clarification they need and this will be mostly on the acceptance criteria.</p>
</div>
<div class="paragraph">
<p>There might be a discussion on how to tackle and implement the story, some ideas pop up, a drawing can be created and in the end, there should be some sort of consensus on how to complete the story.</p>
</div>
<div class="paragraph">
<p>Time for estimations and important is not to influence each other as it is too easy to look to at others. People tend to follow the more technical leaders, are afraid to say they actually do not know or think they will not be the person doing the work themselves anyway.</p>
</div>
<div class="paragraph">
<p>As the scrum master, you want to avoid this and still want to come to a sensible estimation. Playing planning poker can help here.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_how">How</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The concept of planning poker is pretty simple; each team member has a set of cards. They are numbered like 0, 1/2, 1, 2, 3, 5, 8, 13, 20, 40 and 100. There is also a question mark and coffee cup card for obvious reasons.</p>
</div>
<div class="paragraph">
<p>When it is time for the estimation of the story, ask each team member to pick a card, but not to show the card yet. To be sure everybody has picked a card and cannot change it afterward, let them put it down on the table without showing the value.</p>
</div>
<div class="paragraph">
<p>Turn the cards around all at once and see the results. If all the cards have the same value, then this can be coincident, but mostly you will see a difference.</p>
</div>
<div class="paragraph">
<p>Important now is to have the discussion. Somebody with a low value might think it is just an easy task because he has done it before. On the other hand, he might also forget some elements. A high value might be because somebody is unclear of what needs to be done or has experience with it and knows some of the difficulties in the work.</p>
</div>
<div class="paragraph">
<p>So let the lowest and highest value have a discussion to explain the values. This need to be a meaningful explanation and make sure the estimate is not based on business priority as that is not for the team to decide. If the person does not give a good reason for his value, then let him explain why it won&#8217;t be the high value instead or how it compares to a similar story.</p>
</div>
<div class="paragraph">
<p>Do not do this too long. Give two or three people a chance to explain their estimation. Then do a re-estimation. People now know what kind of estimates have been given so they are biased. However, the earlier discussions could have helped to get to a better value.
All these talks will help to shape how the team is going to implement the story. Having this on a technical level is fine as it helps to discover the problems and provides clarity when the story is picked up in the sprint itself.</p>
</div>
<div class="paragraph">
<p>if the second round has again differences, then you might consider hearing the low and high estimaters again. But when there are no new arguments, do not spend too much time on it.</p>
</div>
<div class="paragraph">
<p>You can pick an average value instead as it will be an estimation after all. Take some time in the retrospective to see if it was estimated correctly.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_when">When</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Do these kinds of estimation rounds during your sprint. Take maybe 2 times an hour to go over new stories. Do not spend too much time on each story and if you see it ending in all kinds of business discussions, throw it back to the product owner so they can work on a better story description.</p>
</div>
<div class="paragraph">
<p>Try not to do refinement during the planning phase (in which you should decide which stories to actually pick up in your next sprint). At that time it is too late to get back to stakeholders with questions or do some investigations.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Planning poker is an essential part of scrum as it gives us not only relative values to stories, but it is also a consensus based way to have a discussion about the way the story will be completed. Not doing it, or even without hiding the cards, will lead to incorrect estimations and assumptions and in the end to an unknown and not shared way of how to implement the story.</p>
</div>
</div>
</div>]]></description><link>http://mindbyte.nl/2017/09/08/The-importance-of-planning-poker.html</link><guid isPermaLink="true">http://mindbyte.nl/2017/09/08/The-importance-of-planning-poker.html</guid><category><![CDATA[scrum]]></category><dc:creator><![CDATA[Michiel van Oudheusden]]></dc:creator><pubDate>Fri, 08 Sep 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Run the Azure CLI 2.0 on a VSTS hosted Linux agent]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>The new Azure CLI version 2 is pretty easy to use when you want to manage your Azure resources. Even if you want to use it from the VSTS build/release agent, you can use the special Azure CLI task. This will log in, set the correct subscription, execute inline or script and perform a logout.</p>
</div>
<div class="paragraph">
<p>The task is clever enough to detect the type of operating system and will switch between using a shell or a batch file. An inline script will be saved as a temporary shell or batch file too.</p>
</div>
<div class="paragraph">
<p>The agent that executes the task need to have the Azure CLI installed. On your own agents, this is a once off operation. When you use the hosted agents, you can also use the Hosted VS2017. When the Azure CLI is not there, you can, of course, install it with a task.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_linux_agent">Linux agent</h2>
<div class="sectionbody">
<div class="paragraph">
<p>So when you want to use a Hosted Linux agent, then at this time of writing, it does not contain the Azure CLI. Luckily it is pretty easy to add.</p>
</div>
<div class="paragraph">
<p>At the beginning of your process, add a Shell script task. You can use the Microsoft version however that requires you to put the script in source control. Alternatively, you can use a Shell script that <a href="https://github.com/openalm/Extension-UtilitiesPack">supports inline script</a>.</p>
</div>
<div class="paragraph">
<p>You can find the script <a href="https://github.com/mivano/AzureTooling/blob/master/SetupAzureCLI.sh">here</a> but as it is pretty short I have included it below.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">#!/bin/bash
echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ wheezy main" | \
     sudo tee /etc/apt/sources.list.d/azure-cli.list
sudo apt-key adv --keyserver packages.microsoft.com --recv-keys 417A0893
sudo apt-get install apt-transport-https
sudo apt-get update &amp;&amp; sudo apt-get install azure-cli</code></pre>
</div>
</div>
<div class="paragraph">
<p>After your shell script task, add your Azure CLI tasks. You will get something like the below.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="http://mindbyte.nl/images/azlinuxshell.png" alt="azlinuxshell.png">
</div>
</div>
<div class="paragraph">
<p>Hopefully, Microsoft will add the Azure CLI to their images, so this step will not be needed anymore.</p>
</div>
</div>
</div>]]></description><link>http://mindbyte.nl/2017/09/08/Run-the-Azure-CLI-20-on-a-VSTS-hosted-Linux-agent.html</link><guid isPermaLink="true">http://mindbyte.nl/2017/09/08/Run-the-Azure-CLI-20-on-a-VSTS-hosted-Linux-agent.html</guid><category><![CDATA[azure]]></category><category><![CDATA[VSTS]]></category><dc:creator><![CDATA[Michiel van Oudheusden]]></dc:creator><pubDate>Fri, 08 Sep 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Save money in Azure by shutting down VMs]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>In Azure, you pay for what you use. And when we talk about virtual machines, this means that you pay for the compute, network and storage. This is charged by the minute, so anytime you are not using the VM, you can save money by turning it off. You need to be careful though as turning it off from within the VM moves it to a stop state but still incur a cost. You need to make sure to deallocate the resources. Only in this state, you will not be <a href="https://azure.microsoft.com/en-us/pricing/details/virtual-machines/windows/">charged</a>.</p>
</div>
<div class="paragraph">
<p>So how to actually make sure the VM is deallocated? The easiest way is to use the <a href="https://portal.azure.com">Azure Portal</a>. Go to the virtual machine and select the Stop option. In the overview section you will see a <strong>Stopped (deallocated)</strong> appear which means that the VM has no cores assigned to it anymore and you will no longer be billed for it.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_automation">Automation</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Doing it manually is nice, but using automation is better. There are various ways to talk to the Azure APIs, but the Azure CLI is pretty simple to use. Make sure you install it using the <a href="https://docs.microsoft.com/en-us/cli/azure/install-azure-cli">documentation</a> first.</p>
</div>
<div class="paragraph">
<p>With the following command you can deallocate the VM called <em>ubuntu</em> in the resource group <em>vm-auto-rg</em>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" data-lang="shell">az vm deallocate --name ubuntu --resource-group vm-auto-rg</code></pre>
</div>
</div>
<div class="paragraph">
<p>Starting the same machine is easy too:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" data-lang="shell">az vm start --name ubuntu --resource-group vm-auto-rg</code></pre>
</div>
</div>
<div class="paragraph">
<p>Instead of name and resource group, you can also use the <strong>--ids</strong> option to pass in the identifier of the machine. Another useful option is to add the <strong>--no-wait</strong> option which indeed does not wait for the response to be returned.</p>
</div>
<div class="paragraph">
<p>Be aware; you can also do a stop with AZ command, but this will mean the machine is still billable.</p>
</div>
<div class="sect2">
<h3 id="_auto_shutdown">Auto shutdown</h3>
<div class="paragraph">
<p>The above command you need to run manually, but luckily there are options in the Azure portal to help you. Inside the VM blade, there is an Auto-shutdown section where you indicate a schedule to automatically shutdown (meaning deallocate) your VM.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="http://mindbyte.nl/images/azureautoshutdown.png" alt="azureautoshutdown.png">
</div>
</div>
<div class="paragraph">
<p>However, this does not include an option to start the VM automatically. Do consider if this is really needed, a manual start can be a better approach. This option can make sure you do not forget to turn off the machine at the end of the day.</p>
</div>
<div class="paragraph">
<p>More control you get when you use the <a href="https://azure.microsoft.com/en-us/services/devtest-lab/">Azure DevTest labs</a>. With policies, you can specify start and shutdown rules for the Virtual Machines inside the lab.</p>
</div>
</div>
<div class="sect2">
<h3 id="_runbooks">Runbooks</h3>
<div class="paragraph">
<p>Using Azure Automation you can also setup runbooks that can do similar things. A more complicated version is <a href="https://docs.microsoft.com/en-us/azure/automation/automation-solution-vm-management">this one</a> and for a more simple version, you can implement <a href="https://gallery.technet.microsoft.com/scriptcenter/Scheduled-Virtual-Machine-2162ac63">this one</a>.
By applying tags to the machines you can specify more complex schedules.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_visual_studio_team_services">Visual Studio Team Services</h2>
<div class="sectionbody">
<div class="paragraph">
<p>We see we can use the Azure CLI but need something to execute this command at a certain time. Azure Automation can do this, but we can also use VSTS as it has a build system with a scheduler. One of the tasks in VSTS is the Azure CLI task. Not only does it log in for you and set a subscription, it will also execute either inline script or a file from your source control.</p>
</div>
<div class="paragraph">
<p>That shell command is a one liner:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" data-lang="shell">az vm deallocate --no-wait --ids $(az resource list --tag "$1" --query "[?type=='Microsoft.Compute/virtualMachines'].id" -o tsv)</code></pre>
</div>
</div>
<div class="paragraph">
<p>It will find all machines of type VM and contain a specific tag. The resulting list will be used as the argument for the ids parameter to the AZ command. The $1 is used to capture the first parameter passed to the shell script.</p>
</div>
<div class="paragraph">
<p>We will use a Windows agent, so we need to make sure python and the AZ CLI are installed. Normally they are part of the hosted agents although at the time of writing <a href="https://github.com/Microsoft/vsts-tasks/issues/5077">this is not the case</a>. No worries, we will just install it using a PowerShell command.</p>
</div>
<div class="paragraph">
<p><strong>Update 01/Sep/2017</strong> The issue is fixed and the hosted builds do have Python in the path and the tools installed. So the PowerShell step can be excluded.</p>
</div>
<div class="sect2">
<h3 id="_so_how_to_set_this_up">So how to set this up</h3>
<div class="paragraph">
<p>Create a new repository, drop the files from the <a href="https://github.com/mivano/AzureTooling/tree/master/StartStop">StartStop folder</a> in there and commit. This is not a hard requirement but having your scripts under source control is easier for maintaining them. However, you can also use inline scripts.</p>
</div>
<div class="paragraph">
<p>Next, create a new empty build, point to your repository and add a PowerShell task. We can use the inline script option and use the following as the scripts contents:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-powershell" data-lang="powershell">&amp;'C:\Program Files\Python36\python.exe' -m pip install --user azure-cli
Write-host '##vso[task.prependpath]C:\Program Files\Python36'</code></pre>
</div>
</div>
<div class="paragraph">
<p>Next, add the Azure CLI task. Select the StartVMsByTags.bat or StopVMsByTag.bat file. We are using a Windows host, so we need a batch file instead of a shell script, but both are included in the git repository. As the argument, enter the tag that you used to mark the VMs that should be turned off or on. With a scheduled trigger you set up a schedule so the build will be executed every morning, evening, weekend etc.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="http://mindbyte.nl/images/azurestopvms.png" alt="azurestopvms.png">
</div>
</div>
<div class="paragraph">
<p>Create a similar build that does the reverse of what you just did; so run a build in the morning to start all the VMs in the subscription having the tag <em>AutoStart</em> and have a build in the evening to deallocate all the machines having the tag <em>AutoShutdown</em>.</p>
</div>
<div class="paragraph">
<p>You can play with different tags and schedules if that makes more sense. Do note that deallocating releases resources on the Virtual Machines, including IP addresses and when set to dynamic, you might not get the same IP back.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>There are various ways to move VMs to a deallocated state and even options to turn it back on. Remember this will save you a lot of money (24*31=744 compared to e.g. 8*5*4=160 hours). If you already have VSTS then it is a matter of using the Azure CLI task and some clever schedules and tags to get the same experience and start saving money.</p>
</div>
</div>
</div>]]></description><link>http://mindbyte.nl/2017/08/22/Save-money-in-Azure-by-shutting-down-V-M.html</link><guid isPermaLink="true">http://mindbyte.nl/2017/08/22/Save-money-in-Azure-by-shutting-down-V-M.html</guid><category><![CDATA[azure]]></category><dc:creator><![CDATA[Michiel van Oudheusden]]></dc:creator><pubDate>Tue, 22 Aug 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Password complexity]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Creating a password for any site or service is difficult enough, but even more when the password needs to comply with a password policy. Minimum length, number of digits, uppercase and lowercase mixes and nonalphabetical characters are favorites. And with a bit of luck, it should also not be the same password as used in the last x password resets. Combine that with a password age so the user needs to do this exercise every number of days.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="http://mindbyte.nl/images/IC212305.gif" alt="IC212305.gif">
</div>
</div>
<div class="paragraph">
<p>What we get is either a technically capable person using a password helper with long random passwords or someone with a <em>complex</em> password used on all sites. When it needs renewal, it normally has a sequential number added to it.</p>
</div>
<div class="paragraph">
<p>So creating secure and safe passwords is a challenge for sure. Passwords that look very secure, as in they match the password complexity rules, are actually not secure at all. Take for example <strong>&amp;Password1</strong>, which is of a decent size, has lower and uppercase characters, has a digit and even a non-alphabetical character. Even when we use common words it is quite often the first character which is a uppercase. A <em>e</em> becomes a <em>3</em>, a <em>0</em> for an <em>o</em> etc. Hackers know this so almost all the dictionary attacks have these words and their variations on their list.
Of course making it complex will make it harder to hack, but also harder to remember by the actual user.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="http://mindbyte.nl/images/password_strength.png" alt="password strength.png">
</div>
</div>
<div class="paragraph">
<p>Although the above example shows that this is easier to remember, it is <a href="http://cups.cs.cmu.edu/soups/2012/proceedings/a7_Shay.pdf">not proven</a> to be.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_direction">Direction</h2>
<div class="sectionbody">
<div class="paragraph">
<p>We are seeing more and more that the current approach to password complexity is changing. Microsoft released a nice paper on <a href="https://www.microsoft.com/en-us/research/wp-content/uploads/2016/06/Microsoft_Password_Guidance-1.pdf">password guidance</a>, but also <a href="https://www.nist.gov/itl/tig/special-publication-800-63-3">Nist</a> published some excellent guidance.</p>
</div>
<div class="paragraph">
<p>It basically boils down to a couple of points:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Stick with a minimum 8 character password.</p>
</li>
<li>
<p>Do not allow common passwords.</p>
</li>
<li>
<p>Forgo the character composition mix.</p>
</li>
<li>
<p>Promote the use of multi factor authentication.</p>
</li>
<li>
<p>Do not force your users to reset passwords periodically.</p>
</li>
<li>
<p>Check and warn users of attack attempts.</p>
</li>
</ul>
</div>
<div class="sect2">
<h3 id="_common_passwords">Common passwords</h3>
<div class="paragraph">
<p>This is a pretty interesting one; after a lot of breaches where passwords have been made public, there is now a list of <a href="https://www.troyhunt.com/introducing-306-million-freely-downloadable-pwned-passwords/">306,259,512 unique passwords</a> which were used in those breaches. It shows that people tend to stick with common and simple passwords.</p>
</div>
<div class="paragraph">
<p>So the first step in your application where a user needs to select a password is to check if it is used in a previous breach. Troy Hunt published a list and <a href="https://www.troyhunt.com/introducing-306-million-freely-downloadable-pwned-passwords/">some guidance</a> on how to do this.</p>
</div>
<div class="paragraph">
<p>Either download the full file and do this check in your application (more control, no dependency) or use his API (make sure to hash the password before sending).</p>
</div>
<div class="paragraph">
<p>Alternatively, there are systems like <a href="https://blogs.dropbox.com/tech/2012/04/zxcvbn-realistic-password-strength-estimation/">Dropbox zxcvbn</a> which will check against patterns, a common list and the amount of time it takes to guess the password. The script will return a value and tip which can be used in a <a href="https://github.com/dropbox/zxcvbn#usage">password strength meter</a> to the user.</p>
</div>
<div class="paragraph">
<p>Make sure to also include user specific elements like username, email, full-name etc so the user cannot mix or use them in the password. Same applies to the name of your service/application.</p>
</div>
</div>
<div class="sect2">
<h3 id="_multi_factor_authentication">Multi factor authentication</h3>
<div class="paragraph">
<p>Something you know, something you have and something you are. A password is something you know. Checking a fingerprint or iris is what you are, although this is harder to check. So the something you have is a popular second-factor authentication method.</p>
</div>
<div class="paragraph">
<p>If the user has a key generator (even a soft one), it is pretty easy to <a href="http://brandonpotter.com/2014/09/07/implementing-free-two-factor-authentication-in-net-using-google-authenticator/">generate One Time Passwords</a>. Other options are SMS or phone delivery (user need to confirm the ownership of the phone) or using email (same as with phone, make sure to confirm the email address is of the user first).</p>
</div>
<div class="paragraph">
<p>When you use the default ASP.NET security framework there is reasonable support on <a href="https://docs.microsoft.com/en-us/aspnet/mvc/overview/security/aspnet-mvc-5-app-with-sms-and-email-two-factor-authentication">how to build this</a> as it is not part of the framework.</p>
</div>
</div>
<div class="sect2">
<h3 id="_third_parties">Third parties</h3>
<div class="paragraph">
<p>Consider also if you do want to maintain passwords at all. There is a lot of hassle and issues associated with this. Sometimes this is unavoidable, but it might in other cases be an option to leverage other services which can spend more time, money and resources in this area.</p>
</div>
<div class="paragraph">
<p>For the more <strong>business to consumers</strong> markets you can use Facebook, Google, Twitter etc as an authentication provider. If it is more <strong>business to business</strong>, consider using, for example, Azure Active Directory.</p>
</div>
<div class="paragraph">
<p>Be aware that you do create a dependency and lose control in favor of other benefits you might get. If you want to keep it all in-house, make use of <a href="https://identityserver.io/">Identity Server</a> and as such leverage a proven and extensive authentication system. Implementing your own security is always a bad idea :-).</p>
</div>
</div>
<div class="sect2">
<h3 id="_other_options">Other options</h3>
<div class="paragraph">
<p>Do you always need passwords? You can also just use tokens and send a link per email to the user when he tries to login in. The <a href="https://auth0.com/blog/how-passwordless-authentication-works/">passwordless authentication</a> is pretty easy. No burden at your side to maintain passwords, do resets, get stuff stolen when there is a breach etc. However, you need to trust the delivery mechanism like email and the speed of the delivery. More and more services are offering this next to their normal login as it is less typing and easier for their users, certainly with <a href="https://www.drzon.net/posts/passwordless-login-in-mobile-apps/">mobile applications</a>.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Passwords are hard; hard to remember, hard to make secure. The best intent to make them complex by requiring a mix of character types and lengths does not help. Combined with commonly used words, common replacements and placements and repetitive password reset, we make it our users pretty hard.</p>
</div>
<div class="paragraph">
<p>Support password generators (so do <a href="https://www.troyhunt.com/the-cobra-effect-that-is-disabling/">not disable clipboard paste</a> in your forms), do not have mandatory password resets and complexity, but do check against common patterns (common words, user specific values, patterns and passwords used in breaches) and keep checking and informing the user afterward.</p>
</div>
<div class="paragraph">
<p>Allow for and promote the use of multi factor authentication to add an additional layer of security.</p>
</div>
<div class="paragraph">
<p>This will make your service/application more secure and your users happier!</p>
</div>
</div>
</div>]]></description><link>http://mindbyte.nl/2017/08/05/The-complexity-of-picking-a-good-password-and-what-you-can-do-as-a-developer.html</link><guid isPermaLink="true">http://mindbyte.nl/2017/08/05/The-complexity-of-picking-a-good-password-and-what-you-can-do-as-a-developer.html</guid><category><![CDATA[security]]></category><dc:creator><![CDATA[Michiel van Oudheusden]]></dc:creator><pubDate>Sat, 05 Aug 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Kubernetes on Azure]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>There are a lot of resources on how to setup Kubernetes on Azure, but they require some prerequisites, so I wanted to make a step by step guide here.</p>
</div>
<div class="paragraph">
<p>The intent is not the explain what Kubernetes is and does, but to get you started quickly. At the end, you will have a Kubernetes cluster running in Azure and you can connect to it via your web browser.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_install_the_azure_cli">Install the Azure CLI</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Make sure you install the Azure command line interface. Version 2 is the current one which allows you to use the <strong>az</strong> command.</p>
</div>
<div class="paragraph">
<p>The instruction depends on the type of operating system, but all the steps are outlined in the <a href="https://docs.microsoft.com/en-us/cli/azure/install-azure-cli">Microsoft documentation</a>.</p>
</div>
<div class="paragraph">
<p>I&#8217;m using Windows here, so I could just <a href="https://aka.ms/InstallAzureCliWindows">download</a> the MSI directly. Follow the setup and when done, open a PowerShell box and type</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-powershell" data-lang="powershell">az</code></pre>
</div>
</div>
<div class="paragraph">
<p>This should return something like</p>
</div>
<div class="imageblock">
<div class="content">
<img src="http://mindbyte.nl/images/az.png" alt="az.png">
</div>
</div>
<div class="paragraph">
<p>If it does not, make sure you installed it correctly, have it in your path, reopen a command prompt (to refetch the environment variables).</p>
</div>
<div class="paragraph">
<p>We first need to log in, so issue the following:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-PowerShell" data-lang="PowerShell">az login</code></pre>
</div>
</div>
<div class="paragraph">
<p>This will point you to a web page where you fill in the given code and login. When done, it has a connection between your account and the Azure tooling.</p>
</div>
<div class="paragraph">
<p>Time to start deploying&#8230;&#8203;</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_resource_group">Resource group</h2>
<div class="sectionbody">
<div class="paragraph">
<p>We will deploy using a resource group, so we first create one using the az group command:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-PowerShell" data-lang="PowerShell">az group create --name=kub-rg --location=westeurope</code></pre>
</div>
</div>
<div class="paragraph">
<p>I call my group <strong>kub-rg</strong> and locate it in west europe. After creation, it will show some details.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="http://mindbyte.nl/images/azgroup.png" alt="azgroup.png">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_kubernetes">Kubernetes</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Installing a Kubernetes cluster works via the same AZ tooling since it allows you to create containers.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-PowerShell" data-lang="PowerShell">az acs create --orchestrator-type=kubernetes --resource-group=kub-rg --name=mivano-kub-cluster --dns-prefix=mivano-kub --generate-ssh-key</code></pre>
</div>
</div>
<div class="paragraph">
<p>We create an Azure Container Service, using the kubernetes type option. We use our already created resource group and give it a name and DNS prefix. This will take some minutes before it completes. A Windows container option is in public preview, but can also be created by specifying the '--windows' option.</p>
</div>
<div class="paragraph">
<p>Once completed it will show you an overview.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="http://mindbyte.nl/images/azkubdone.png" alt="azkubdone.png">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_kubectl">kubectl</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Similar to the Azure CLI, you also have a Kubernetes CLI. You can download this from the <a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/">Kubernetes</a> site or use the AZ tooling to get it:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-PowerShell" data-lang="PowerShell">az acs kubernetes install-cli</code></pre>
</div>
</div>
<div class="imageblock">
<div class="content">
<img src="http://mindbyte.nl/images/azkubectl.png" alt="azkubectl.png">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_connect_kubectl">Connect kubectl</h2>
<div class="sectionbody">
<div class="paragraph">
<p>We now need to tell kubectl how to connect to our Kubernetes cluster. Luckily the Azure tooling can handle that for us.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-PowerShell" data-lang="PowerShell">az acs kubernetes get-credentials --resource-group=kub-rg --name=mivano-kub-cluster</code></pre>
</div>
</div>
<div class="paragraph">
<p>This will not return anything, so let&#8217;s check if we are indeed able to connect.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-PowerShell" data-lang="PowerShell">kubectl get nodes</code></pre>
</div>
</div>
<div class="paragraph">
<p>You should see a list of nodes.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="http://mindbyte.nl/images/kubnodes.png" alt="kubnodes.png">
</div>
</div>
<div class="paragraph">
<p>You can now send commands to your Kubernetest cluster running in Azure.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_use_the_dashboard">Use the dashboard</h2>
<div class="sectionbody">
<div class="paragraph">
<p>If you are a CLI guy, then stop here, but if you want to see a nice dashboard, keep reading. Kubernetes has a UI which you can invoke using the following command:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-PowerShell" data-lang="PowerShell">az acs kubernetes browse -g kub-rg -n mivano-kub-cluster</code></pre>
</div>
</div>
<div class="paragraph">
<p>This will start a webserver and opens your browser pointing to your localhost. You will see a nice UI where you can do most of the work.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="http://mindbyte.nl/images/kubui.png" alt="kubui.png">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_deleting_the_cluster">Deleting the cluster</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Remember that everything you run in Azure cost money, so clean if you are not using it anymore. Since we created a resource group, we can just drop this group to get rid of everything.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-PowerShell" data-lang="PowerShell">az group delete --name kub-rg</code></pre>
</div>
</div>
<div class="paragraph">
<p>This will take some time to complete.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>With some easy tools, you can spin up a Kubernetes cluster on Azure and connect it. With the same tooling, you can scale your cluster and talk to Kubernetes or invoke the web UI. Let&#8217;s see in further posts what we can do with this cluster.</p>
</div>
</div>
</div>]]></description><link>http://mindbyte.nl/2017/08/05/Kubernetes-on-Azure.html</link><guid isPermaLink="true">http://mindbyte.nl/2017/08/05/Kubernetes-on-Azure.html</guid><category><![CDATA[azure]]></category><category><![CDATA[docker]]></category><category><![CDATA[kubernetes]]></category><dc:creator><![CDATA[Michiel van Oudheusden]]></dc:creator><pubDate>Sat, 05 Aug 2017 00:00:00 GMT</pubDate></item></channel></rss>